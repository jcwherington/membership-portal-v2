AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A sample SAM template for deploying Lambda functions.

Parameters:
  MembershipSrcObjectKey:
    Type: String
    Description: S3 object key of the membership lambda code .zip file
  ApplicationSrcObjectKey:
    Type: String
    Description: S3 object key of the application lambda code .zip file
  SwaggerObjectKey:
    Type: String
    Description: S3 object key of the membership api swagger file
  Branch:
    Type: String
    Default: "main"
    Description: Environment lambda is deployed in - Test or Prod.
  Bucket:
    Type: String
    Description: Lambda source code bucket
  DbName:
    Type: String
    Description: Membership database name
  DbPort:
    Type: String
    Description: Membership database port
  DbEndpoint:
    Type: String
    Description: Membership database endpoint
  DbUser:
    Type: String
    Description: Membership database user
  DbPassword:
    Type: String
    Description: Membership database password

Resources:
  MembershipApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub membership-api-handler-${Branch}
      Handler: app.handler
      Runtime: python3.13
      Role: !GetAtt MembershipApiLambdaRole.Arn
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref MembershipSrcObjectKey
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          BRANCH: !Ref Branch
          DB_NAME: !Ref DbName
          DB_PORT: !Ref DbPort
          DB_ENDPOINT: !Ref DbEndpoint
          DB_USER: !Ref DbUser
          DB_PASSWORD: !Ref DbPassword
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      VpcConfig:
        SecurityGroupIds:
          - sg-04caff40b09c98f17
        SubnetIds:
          - subnet-0d559bcdc99142fc9
          - subnet-09636efde372f7c29
          - subnet-02266618a1c5df2f3

  ApplicationApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub application-api-handler-${Branch}
      Handler: app.handler
      Runtime: python3.13
      Role: !GetAtt MembershipApiLambdaRole.Arn
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref ApplicationSrcObjectKey
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          BRANCH: !Ref Branch
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  
  MembershipApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Membership-Api-${Branch}
      StageName: !Ref Branch
      Auth:
        ApiKeyRequired: true
        AddApiKeyRequiredToCorsPreflight: false
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: MembershipApiAuthorization
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${Bucket}/${SwaggerObjectKey}'

  MembershipApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub MembershipApiLambdaRole-${Branch}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ApplicationTablePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt ApplicationTable.Arn

  MembershipLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MembershipApiLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MembershipApiGateway}/*/*/*"

  ApplicationLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApplicationApiLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MembershipApiGateway}/*/*/*"
  
  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub applications-${Branch}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
